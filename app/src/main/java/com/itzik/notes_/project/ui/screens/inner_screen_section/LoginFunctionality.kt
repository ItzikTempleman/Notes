package com.itzik.notes_.project.ui.screens.inner_screen_section;import android.util.Logimport androidx.navigation.NavHostControllerimport com.itzik.notes_.project.ui.navigation.Screenimport com.itzik.notes_.project.viewmodels.UserViewModelimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.launchfun loginFunctionality(    coroutineScope: CoroutineScope,    userViewModel: UserViewModel,    email: String,    password: String,    rootNavController: NavHostController,    onEmailValidationError: () -> Unit,    onPasswordValidationError: () -> Unit,    onSuccess: () -> Unit) {    coroutineScope.launch {        // Try to get the user online first        var loginSuccessful = false        userViewModel.getUserFromUserNameAndPasswordFromOnline(email, password)            .catch { e ->                Log.e("LoginHandler", "Online login error: ${e.message}")            }            .collect { onlineUser ->                // FIX STARTS HERE                val existingUser = userViewModel.getAdminUserIfExists(onlineUser.email)                if (existingUser != null) {                    // User already exists in local DB, just update login status                    existingUser.isLoggedIn = true                    userViewModel.updateIsLoggedIn(existingUser)                } else {                    // New user - register them locally first                    onlineUser.isLoggedIn = true                    userViewModel.registerUser(onlineUser)                    userViewModel.updateIsLoggedIn(onlineUser)                    userViewModel.postAUser(onlineUser)                }                // FIX ENDS HERE                rootNavController.popBackStack()                rootNavController.navigate(Screen.Home.route)                onSuccess()                loginSuccessful = true            }        // If online login was successful, skip offline login        if (loginSuccessful) return@launch        // If online login fails, try offline login        userViewModel.getUserFromUserNameAndPassword(email, password)            .catch { e ->                Log.e("LoginHandler", "Offline login error: ${e.message}")            }            .collect { offlineUser ->                if (offlineUser != null) {                    offlineUser.isLoggedIn = true                    userViewModel.updateIsLoggedIn(offlineUser)                    userViewModel.postAUser(offlineUser)                    userViewModel.registerUser(offlineUser)                    rootNavController.popBackStack()                    rootNavController.navigate(Screen.Home.route)                    onSuccess()                } else {                    Log.e("LoginHandler", "Invalid credentials or user not found")                    onEmailValidationError()                    onPasswordValidationError()                }            }    }}